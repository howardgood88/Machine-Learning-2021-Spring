{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"「hw12_reinforcement_learning_chinese_version.ipynb」的副本","provenance":[{"file_id":"https://github.com/ga642381/ML2021-Spring/blob/main/HW12/HW12_ZH.ipynb","timestamp":1624002552270}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"47b44b3e42b94cf0b0f1ffdc38c676cd":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d19a9f91be0b43f8ad9ac4935323ff7a","IPY_MODEL_116f38806106401bba1919b1640a6854"],"layout":"IPY_MODEL_baa28ec319f84251bf98eb5db34df9af"}},"d19a9f91be0b43f8ad9ac4935323ff7a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"Total:  300.5, Final:  100.0: 100%","description_tooltip":null,"layout":"IPY_MODEL_f9c3b71c07644f93aad5a8e5e41fb910","max":5000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e280bb585a3f4bb4b7e761844c897c9b","value":5000}},"116f38806106401bba1919b1640a6854":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4517cb42b6c841a6a72360f205eddc04","placeholder":"​","style":"IPY_MODEL_695a70b1f75e4b4f888589947158e199","value":" 5000/5000 [32:09&lt;00:00,  2.59it/s]"}},"baa28ec319f84251bf98eb5db34df9af":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f9c3b71c07644f93aad5a8e5e41fb910":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e280bb585a3f4bb4b7e761844c897c9b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":"initial"}},"4517cb42b6c841a6a72360f205eddc04":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"695a70b1f75e4b4f888589947158e199":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"Fp30SB4bxeQb"},"source":["# **Homework 12 - Reinforcement Learning**\n","\n","若有任何問題，歡迎來信至助教信箱 ntu-ml-2021spring-ta@googlegroups.com\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UpC0w2Q5IN6y","executionInfo":{"elapsed":279,"status":"ok","timestamp":1624121472446,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"79f33784-8d8b-417d-e5b2-c26479682620"},"source":["!nvidia-smi"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Sat Jun 19 16:51:12 2021       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 465.27       Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   42C    P8    10W /  70W |      0MiB / 15109MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B31tyauy6fUn","executionInfo":{"elapsed":308,"status":"ok","timestamp":1624121474600,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"4a1632b5-2d20-4627-f6cb-58bc2871ad00"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yXsnCWPtWSNk"},"source":["## 前置作業\n","\n","首先我們需要安裝必要的系統套件及 PyPi 套件。\n","gym 這個套件由 OpenAI 所提供，是一套用來開發與比較 Reinforcement Learning 演算法的工具包（toolkit）。\n","而其餘套件則是為了在 Notebook 中繪圖所需要的套件。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5e2bScpnkVbv","executionInfo":{"elapsed":7500,"status":"ok","timestamp":1624121484619,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"491255d4-bd83-4cc6-bf54-a86818094c8c"},"source":["save_path = './drive/MyDrive/ML大金/HW12/'\n","!apt update\n","!apt install python-opengl xvfb -y\n","!pip install gym[box2d]==0.18.3 pyvirtualdisplay tqdm numpy==1.19.5 torch==1.8.1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[33m\r0% [Working]\u001b[0m\r            \rGet:1 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]\n","\u001b[33m\r0% [Connecting to archive.ubuntu.com (91.189.88.152)] [1 InRelease 14.2 kB/88.7\u001b[0m\r                                                                               \rHit:2 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ InRelease\n","\u001b[33m\r0% [Connecting to archive.ubuntu.com (91.189.88.152)] [1 InRelease 43.1 kB/88.7\u001b[0m\u001b[33m\r0% [2 InRelease gpgv 3,626 B] [Connecting to archive.ubuntu.com (91.189.88.152)\u001b[0m\u001b[33m\r0% [2 InRelease gpgv 3,626 B] [Connecting to archive.ubuntu.com (91.189.88.152)\u001b[0m\r                                                                               \rIgn:3 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease\n","\u001b[33m\r0% [2 InRelease gpgv 3,626 B] [Waiting for headers] [Waiting for headers] [Wait\u001b[0m\r                                                                               \rHit:4 http://archive.ubuntu.com/ubuntu bionic InRelease\n","\u001b[33m\r                                                                               \r0% [2 InRelease gpgv 3,626 B] [Waiting for headers] [Waiting for headers]\u001b[0m\r                                                                         \rHit:5 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic InRelease\n","\u001b[33m\r0% [2 InRelease gpgv 3,626 B] [Waiting for headers] [Waiting for headers]\u001b[0m\r                                                                         \rIgn:6 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease\n","Hit:7 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release\n","Hit:8 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release\n","Get:9 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\n","Hit:10 http://ppa.launchpad.net/cran/libgit2/ubuntu bionic InRelease\n","Hit:11 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic InRelease\n","Get:12 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]\n","Hit:13 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic InRelease\n","Fetched 252 kB in 2s (144 kB/s)\n","Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","47 packages can be upgraded. Run 'apt list --upgradable' to see them.\n","Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","python-opengl is already the newest version (3.1.0+dfsg-1).\n","xvfb is already the newest version (2:1.19.6-1ubuntu4.9).\n","0 upgraded, 0 newly installed, 0 to remove and 47 not upgraded.\n","Requirement already satisfied: gym[box2d]==0.18.3 in /usr/local/lib/python3.7/dist-packages (0.18.3)\n","Requirement already satisfied: pyvirtualdisplay in /usr/local/lib/python3.7/dist-packages (2.2)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (4.41.1)\n","Requirement already satisfied: numpy==1.19.5 in /usr/local/lib/python3.7/dist-packages (1.19.5)\n","Requirement already satisfied: torch==1.8.1 in /usr/local/lib/python3.7/dist-packages (1.8.1)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (1.4.1)\n","Requirement already satisfied: cloudpickle<1.7.0,>=1.2.0 in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (1.3.0)\n","Requirement already satisfied: Pillow<=8.2.0 in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (7.1.2)\n","Requirement already satisfied: pyglet<=1.5.15,>=1.4.0 in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (1.5.0)\n","Requirement already satisfied: box2d-py~=2.3.5; extra == \"box2d\" in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (2.3.8)\n","Requirement already satisfied: EasyProcess in /usr/local/lib/python3.7/dist-packages (from pyvirtualdisplay) (0.3)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch==1.8.1) (3.7.4.3)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from pyglet<=1.5.15,>=1.4.0->gym[box2d]==0.18.3) (0.16.0)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"M_-i3cdoYsks"},"source":["接下來，設置好 virtual display，並引入所有必要的套件。"]},{"cell_type":"code","metadata":{"id":"nl2nREINDLiw"},"source":["%%capture\n","from pyvirtualdisplay import Display\n","virtual_display = Display(visible=0, size=(1400, 900))\n","virtual_display.start()\n","\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","\n","from IPython import display\n","\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.distributions import Categorical\n","from tqdm.notebook import tqdm"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HVu9-Vdrl4E3"},"source":["# 請不要更改 random seed !!!!\n","# 不然在judgeboi上 你的成績不會被reproduce !!!!"]},{"cell_type":"code","metadata":{"id":"fV9i8i2YkRbO"},"source":["seed = 543 # Do not change this\n","def fix(env, seed):\n","  env.seed(seed)\n","  env.action_space.seed(seed)\n","  torch.manual_seed(seed)\n","  torch.cuda.manual_seed(seed)\n","  torch.cuda.manual_seed_all(seed)\n","  np.random.seed(seed)\n","  random.seed(seed)\n","  torch.set_deterministic(True)\n","  torch.backends.cudnn.benchmark = False\n","  torch.backends.cudnn.deterministic = True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"He0XDx6bzjgC"},"source":["最後，引入 OpenAI 的 gym，並建立一個 [Lunar Lander](https://gym.openai.com/envs/LunarLander-v2/) 環境。"]},{"cell_type":"code","metadata":{"id":"N_4-xJcbBt09"},"source":["%%capture\n","import gym\n","import random\n","import numpy as np\n","\n","env = gym.make('LunarLander-v2')\n","\n","fix(env, seed)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NmiAOfqRwRX5"},"source":["import time\n","start = time.time()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NrkVvTrvWZ5H"},"source":["## 什麼是 Lunar Lander？\n","\n","“LunarLander-v2” 這個環境是在模擬登月小艇降落在月球表面時的情形。\n","這個任務的目標是讓登月小艇「安全地」降落在兩個黃色旗幟間的平地上。\n","> Landing pad is always at coordinates (0,0).\n","> Coordinates are the first two numbers in state vector.\n","\n","![](https://gym.openai.com/assets/docs/aeloop-138c89d44114492fd02822303e6b4b07213010bb14ca5856d2d49d6b62d88e53.svg)\n","\n","所謂的「環境」其實同時包括了 agent 和 environment。\n","我們利用 `step()` 這個函式讓 agent 行動，而後函式便會回傳 environment 給予的 observation/state（以下這兩個名詞代表同樣的意思）和 reward。"]},{"cell_type":"markdown","metadata":{"id":"bIbp82sljvAt"},"source":["### Observation / State\n","\n","首先，我們可以看看 environment 回傳給 agent 的 observation 究竟是長什麼樣子的資料："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rsXZra3N9R5T","executionInfo":{"elapsed":269,"status":"ok","timestamp":1624086567293,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"c7707a10-a59a-45c0-cec1-689e4f743fb4"},"source":["print(env.observation_space)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Box(-inf, inf, (8,), float32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ezdfoThbAQ49"},"source":["`Box(8,)` 說明我們會拿到 8 維的向量作為 observation，其中包含：垂直及水平座標、速度、角度、加速度等等，這部分我們就不細說。\n","\n","### Action\n","\n","而在 agent 得到 observation 和 reward 以後，能夠採取的動作有："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p1k4dIrBAaKi","executionInfo":{"elapsed":5,"status":"ok","timestamp":1624086569184,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"382bbd68-e5bd-4022-c426-9df3b8cfa92f"},"source":["print(env.action_space)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Discrete(4)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dejXT6PHBrPn"},"source":["`Discrete(4)` 說明 agent 可以採取四種離散的行動：\n","- 0 代表不採取任何行動\n","- 2 代表主引擎向下噴射\n","- 1, 3 則是向左右噴射\n","\n","接下來，我們嘗試讓 agent 與 environment 互動。\n","在進行任何操作前，建議先呼叫 `reset()` 函式讓整個「環境」重置。\n","而這個函式同時會回傳「環境」最初始的狀態。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pi4OmrmZgnWA","executionInfo":{"elapsed":418,"status":"ok","timestamp":1624086570818,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"17402346-39fc-47ea-a52c-20a26c0550e5"},"source":["initial_state = env.reset()\n","print(initial_state)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[ 0.00396109  1.4083536   0.40119505 -0.11407257 -0.00458307 -0.09087662\n","  0.          0.        ]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uBx0mEqqgxJ9"},"source":["接著，我們試著從 agent 的四種行動空間中，隨機採取一個行動"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vxkOEXRKgizt","executionInfo":{"elapsed":258,"status":"ok","timestamp":1624086572769,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"1206f822-6af0-4e4c-ee86-91a23511e170"},"source":["random_action = env.action_space.sample()\n","print(random_action)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mns-bO01g0-J"},"source":["再利用 `step()` 函式讓 agent 根據我們隨機抽樣出來的 `random_action` 動作。\n","而這個函式會回傳四項資訊：\n","- observation / state\n","- reward\n","- 完成與否\n","- 其餘資訊"]},{"cell_type":"code","metadata":{"id":"E_WViSxGgIk9"},"source":["observation, reward, done, info = env.step(random_action)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FdieGq7NuBIm"},"source":["第一項資訊 `observation` 即為 agent 採取行動之後，agent 對於環境的 observation 或者說環境的 state 為何。\n","而第三項資訊 `done` 則是 `True` 或 `False` 的布林值，當登月小艇成功著陸或是不幸墜毀時，代表這個回合（episode）也就跟著結束了，此時 `step()` 函式便會回傳 `done = True`，而在那之前，`done` 則保持 `False`。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yK7r126kuCNp","executionInfo":{"elapsed":5,"status":"ok","timestamp":1624086576867,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"af6f78d5-9a2d-4493-d3b2-f0592137f748"},"source":["print(done)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["False\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GKdS8vOihxhc"},"source":["### Reward\n","\n","而「環境」給予的 reward 大致是這樣計算：\n","- 小艇墜毀得到 -100 分\n","- 小艇在黃旗幟之間成功著地則得 100~140 分\n","- 噴射主引擎（向下噴火）每次 -0.3 分\n","- 小艇最終完全靜止則再得 100 分\n","- 小艇每隻腳碰觸地面 +10 分\n","\n","> Reward for moving from the top of the screen to landing pad and zero speed is about 100..140 points.\n","> If lander moves away from landing pad it loses reward back.\n","> Episode finishes if the lander crashes or comes to rest, receiving additional -100 or +100 points.\n","> Each leg ground contact is +10.\n","> Firing main engine is -0.3 points each frame.\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vxQNs77hi0_7","executionInfo":{"elapsed":291,"status":"ok","timestamp":1624086580300,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"87ff7d5b-b3c4-4b2a-e16c-0edd4046d3af"},"source":["print(reward) # after doing a random action (0), the immediate reward is stored in this "],"execution_count":null,"outputs":[{"output_type":"stream","text":["-0.8588900517154912\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Mhqp6D-XgHpe"},"source":["### Random Agent\n","\n","最後，在進入實做之前，我們就來看看這樣一個 random agent 能否成功登陸月球："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":395},"id":"Y3G0bxoccelv","executionInfo":{"elapsed":381,"status":"error","timestamp":1624086582858,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"fc0a7d56-76d0-443c-eaa2-f7aa325e47ad"},"source":["env.reset()\n","\n","img = plt.imshow(env.render(mode='rgb_array'))\n","\n","done = False\n","while not done:\n","    action = env.action_space.sample()\n","    observation, reward, done, _ = env.step(action)\n","\n","    img.set_data(env.render(mode='rgb_array'))\n","    display.display(plt.gcf())\n","    display.clear_output(wait=True)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-8d8eb33f4d26>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'rgb_array'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gym/core.py\u001b[0m in \u001b[0;36mrender\u001b[0;34m(self, mode, **kwargs)\u001b[0m\n\u001b[1;32m    238\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    239\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mrender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'human'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 240\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    241\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    242\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gym/envs/box2d/lunar_lander.py\u001b[0m in \u001b[0;36mrender\u001b[0;34m(self, mode)\u001b[0m\n\u001b[1;32m    339\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mrender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'human'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 341\u001b[0;31m         \u001b[0;32mfrom\u001b[0m \u001b[0mgym\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menvs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclassic_control\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrendering\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    342\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mviewer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mviewer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrendering\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mViewer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mVIEWPORT_W\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mVIEWPORT_H\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gym/envs/classic_control/rendering.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m     \u001b[0;32mfrom\u001b[0m \u001b[0mpyglet\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgl\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m \u001b[0;32mexcept\u001b[0m \u001b[0mImportError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m     raise ImportError('''\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyglet/gl/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    233\u001b[0m \u001b[0;32melif\u001b[0m \u001b[0mcompat_platform\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'darwin'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    234\u001b[0m     \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mcocoa\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mCocoaConfig\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mConfig\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 235\u001b[0;31m \u001b[0;32mdel\u001b[0m \u001b[0mbase\u001b[0m  \u001b[0;31m# noqa: F821\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    236\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    237\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'base' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"F5paWqo7tWL2"},"source":["## Policy Gradient\n","\n","現在來搭建一個簡單的 policy network。\n","我們預設模型的輸入是 8-dim 的 observation，輸出則是離散的四個動作之一："]},{"cell_type":"code","metadata":{"id":"J8tdmeD-tZew"},"source":["class PolicyGradientNetwork(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.Dense = nn.Sequential(\n","            nn.Linear(8, 16),\n","            nn.ReLU(),\n","            nn.Linear(16, 16),\n","            nn.ReLU(),\n","            nn.Linear(16, 4),\n","            nn.Softmax()\n","        )\n","\n","    def forward(self, state):\n","        return self.Dense(state)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ynbqJrhIFTC3"},"source":["再來，搭建一個簡單的 agent，並搭配上方的 policy network 來採取行動。\n","這個 agent 能做到以下幾件事：\n","- `learn()`：從記下來的 log probabilities 及 rewards 來更新 policy network。\n","- `sample()`：從 environment 得到 observation 之後，利用 policy network 得出應該採取的行動。\n","而此函式除了回傳抽樣出來的 action，也會回傳此次抽樣的 log probabilities。"]},{"cell_type":"code","metadata":{"id":"zZo-IxJx286z"},"source":["class PolicyGradientAgent():\n","    def __init__(self, network):\n","        self.network = network\n","        self.optimizer = optim.Adam(self.network.parameters(), lr=0.001)\n","         \n","    def forward(self, state):\n","        return self.network(state)\n","\n","    def learn(self, log_probs, rewards):\n","        loss = (-log_probs * rewards).sum() # You don't need to revise this to pass simple baseline (but you can)\n","\n","        self.optimizer.zero_grad()\n","        loss.backward(retain_graph=True)\n","        self.optimizer.step()\n","        \n","    def sample(self, state):\n","        action_prob = self.network(torch.FloatTensor(state))\n","        action_dist = Categorical(action_prob)\n","        action = action_dist.sample()\n","        log_prob = action_dist.log_prob(action)\n","        \n","        return action.item(), log_prob\n","\n","    def save(self, PATH): # You should not revise this\n","        Agent_Dict = {\n","            \"network\" : self.network.state_dict(),\n","            \"optimizer\" : self.optimizer.state_dict()\n","        }\n","        torch.save(Agent_Dict, PATH)\n","\n","    def load(self, PATH): # You should not revise this\n","        checkpoint = torch.load(PATH)\n","        self.network.load_state_dict(checkpoint[\"network\"])\n","        #如果要儲存過程或是中斷訓練後想繼續可以用喔 ^_^\n","        self.optimizer.load_state_dict(checkpoint[\"optimizer\"])\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vCMYHWkDhhxm"},"source":["## Actor critic\n","\n","輸入state，預測本回合會得到幾分，並把超過這個分數的discounted reward視為好(正)，反之視為不好(負)"]},{"cell_type":"code","metadata":{"id":"x5bf8xA-hmts"},"source":["class ActorCriticNetwork(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.Dense = nn.Sequential(\n","            nn.Linear(8, 16),\n","            nn.ReLU(),\n","            nn.Linear(16, 32),\n","            nn.ReLU(),\n","            nn.Linear(32, 16),\n","            nn.ReLU(),\n","            nn.Linear(16, 1),\n","        )\n","\n","    def forward(self, state):\n","        return self.Dense(state)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TN4SjG7_mhmB"},"source":["class ActorCriticAgent():\n","    def __init__(self, network):\n","        self.network = network\n","        self.optimizer = optim.Adam(self.network.parameters(), lr=0.001)\n","         \n","    def forward(self, state):\n","        return self.network(torch.FloatTensor(state))\n","\n","    def learn(self, baselines, rewards):\n","        criterion = nn.MSELoss()\n","        loss = criterion(baselines, rewards)\n","\n","        self.optimizer.zero_grad()\n","        loss.backward()\n","        self.optimizer.step()\n","\n","    def save(self, PATH): # You should not revise this\n","        Agent_Dict = {\n","            \"network\" : self.network.state_dict(),\n","            \"optimizer\" : self.optimizer.state_dict()\n","        }\n","        torch.save(Agent_Dict, PATH)\n","\n","    def load(self, PATH): # You should not revise this\n","        checkpoint = torch.load(PATH)\n","        self.network.load_state_dict(checkpoint[\"network\"])\n","        #如果要儲存過程或是中斷訓練後想繼續可以用喔 ^_^\n","        self.optimizer.load_state_dict(checkpoint[\"optimizer\"])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ehPlnTKyRZf9"},"source":["最後，建立一個 network 和 agent，就可以開始進行訓練了。"]},{"cell_type":"code","metadata":{"id":"GfJIvML-RYjL"},"source":["PG_network = PolicyGradientNetwork()\n","agent = PolicyGradientAgent(PG_network)\n","AC_network = ActorCriticNetwork()\n","baseAgent = ActorCriticAgent(AC_network)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ouv23glgf5Qt"},"source":["## 訓練 Agent\n","\n","現在我們開始訓練 agent。\n","透過讓 agent 和 environment 互動，我們記住每一組對應的 log probabilities 及 reward，並在成功登陸或者不幸墜毀後，回放這些「記憶」來訓練 policy network。"]},{"cell_type":"code","metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":124,"referenced_widgets":["47b44b3e42b94cf0b0f1ffdc38c676cd","d19a9f91be0b43f8ad9ac4935323ff7a","116f38806106401bba1919b1640a6854","baa28ec319f84251bf98eb5db34df9af","f9c3b71c07644f93aad5a8e5e41fb910","e280bb585a3f4bb4b7e761844c897c9b","4517cb42b6c841a6a72360f205eddc04","695a70b1f75e4b4f888589947158e199"]},"id":"vg5rxBBaf38_","outputId":"b917c196-7805-49e8-d1e5-e08f41dce318"},"source":["load = True\n","if load:\n","    agent.load(save_path + 'PG.pt')\n","    baseAgent.load(save_path + 'AC.pt')\n","    print('Network loaded!')\n","\n","agent.network.train()  # 訓練前，先確保 network 處在 training 模式\n","baseAgent.network.train()\n","EPISODE_PER_BATCH = 1  # 每蒐集 5 個 episodes 更新一次 agent\n","NUM_BATCH = 5000        # 總共更新 400 次\n","gama = 0.99\n","\n","avg_total_rewards, avg_final_rewards = [], []\n","\n","prg_bar = tqdm(range(NUM_BATCH))\n","for batch in prg_bar:\n","\n","    log_probs, rewards, baselines = [], [], []\n","    total_rewards, final_rewards = [], []\n","\n","    # 蒐集訓練資料\n","    for episode in range(EPISODE_PER_BATCH):\n","        \n","        state = env.reset()\n","        total_reward, total_step = 0, 0\n","        seq_rewards = []\n","        while True:\n","\n","            action, log_prob = agent.sample(state) # at, log(at|st)\n","            next_state, reward, done, _ = env.step(action)\n","\n","            log_probs.append(log_prob) # [log(a1|s1), log(a2|s2), ...., log(at|st)]\n","            # seq_rewards.append(reward)\n","            for idx in range(len(rewards)):\n","                rewards[idx] += reward * gama**(total_step - idx)\n","            rewards.append(reward) #改這裡\n","\n","            baseline = baseAgent.forward(state) # DQN\n","            baselines.append(baseline)\n","            # ! 重要 ！\n","            # 現在的reward 的implementation 為每個時刻的瞬時reward, 給定action_list : a1, a2, a3 ......\n","            #                                                       reward :     r1, r2 ,r3 ......\n","            # medium：將reward調整成accumulative decaying reward, 給定action_list : a1,                         a2,                           a3 ......\n","            #                                                       reward :     r1+0.99*r2+0.99^2*r3+......, r2+0.99*r3+0.99^2*r4+...... ,r3+0.99*r4+0.99^2*r5+ ......\n","            # boss : implement DQN\n","\n","            state = next_state\n","            total_reward += reward\n","            total_step += 1\n","\n","            if done:\n","                final_rewards.append(reward)\n","                total_rewards.append(total_reward)\n","                break\n","\n","    # print(f\"rewards looks like \", np.shape(rewards))  \n","    # print(f\"log_probs looks like \", np.shape(log_probs))  \n","    # print(f\"baselines looks like \", np.shape(baselines))    \n","    # 紀錄訓練過程\n","    avg_total_reward = sum(total_rewards) / len(total_rewards)\n","    avg_final_reward = sum(final_rewards) / len(final_rewards)\n","    avg_total_rewards.append(avg_total_reward)\n","    avg_final_rewards.append(avg_final_reward)\n","    prg_bar.set_description(f\"Total: {avg_total_reward: 4.1f}, Final: {avg_final_reward: 4.1f}\")\n","\n","    # 更新網路\n","    # rewards = np.concatenate(rewards, axis=0)\n","    # rewards = torch.from_numpy((rewards - np.mean(rewards)) / (np.std(rewards) + 1e-9))  # 將 reward 正規標準化\n","    baselines = torch.stack(baselines).squeeze()\n","    log_probs = torch.stack(log_probs)\n","    rewards = torch.FloatTensor(rewards) - baselines\n","\n","    agent.learn(log_probs, rewards)\n","    baseAgent.learn(baselines, rewards)\n","    # print(\"logs prob looks like \", log_probs.size())\n","    # print(\"torch.from_numpy(rewards) looks like \", rewards.size())\n","    # print(\"torch.from_numpy(baselines) looks like \", baselines.size())\n","\n","    agent.save(save_path + 'PG.pt')\n","    baseAgent.save(save_path + 'AC.pt')\n","\n","print('Done!')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Network loaded!\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"47b44b3e42b94cf0b0f1ffdc38c676cd","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=5000.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py:119: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  input = module(input)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"vNb_tuFYhKVK"},"source":["### 訓練結果\n","\n","訓練過程中，我們持續記下了 `avg_total_reward`，這個數值代表的是：每次更新 policy network 前，我們讓 agent 玩數個回合（episodes），而這些回合的平均 total rewards 為何。\n","理論上，若是 agent 一直在進步，則所得到的 `avg_total_reward` 也會持續上升，直至 250 上下。\n","若將其畫出來則結果如下："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"wZYOI8H10SHN","executionInfo":{"status":"error","timestamp":1624123605723,"user_tz":-480,"elapsed":282,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"}},"outputId":"bc5c2797-bb72-4fb9-df01-7f6705065b40"},"source":["end = time.time()\n","plt.plot(avg_total_rewards)\n","plt.title(\"Total Rewards\")\n","plt.show()"],"execution_count":21,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-a6fd66707434>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mavg_total_rewards\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Total Rewards\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'time' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"mV5jj4dThz0Y"},"source":["另外，`avg_final_reward` 代表的是多個回合的平均 final rewards，而 final reward 即是 agent 在單一回合中拿到的最後一個 reward。\n","如果同學們還記得環境給予登月小艇 reward 的方式，便會知道，不論**回合的最後**小艇是不幸墜毀、飛出畫面、或是靜止在地面上，都會受到額外地獎勵或處罰。\n","也因此，final reward 可被用來觀察 agent 的「著地」是否順利等資訊。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"txDZ5vlGWz5w","executionInfo":{"elapsed":323,"status":"ok","timestamp":1624121440764,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"db4f30e9-eda5-4fde-fa2c-ba22fb2c89e2"},"source":["plt.plot(avg_final_rewards)\n","plt.title(\"Final Rewards\")\n","plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"gyT7tNwkVdS-"},"source":["訓練時間\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_t-JsKxUViFy","executionInfo":{"elapsed":261,"status":"ok","timestamp":1624121443929,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"7cefc4ca-3404-4436-f9d2-7a558e42b990"},"source":["print(f\"total time is {end-start} sec\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["total time is 3179.340103626251 sec\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"u2HaGRVEYGQS"},"source":["## 測試"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":544},"id":"5yFuUKKRYH73","executionInfo":{"status":"ok","timestamp":1624123612099,"user_tz":-480,"elapsed":1609,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"}},"outputId":"eadd5033-4839-469e-ba00-cc05d51343ac"},"source":["fix(env, seed)\n","agent.load(save_path + 'PG.pt')\n","# baseAgent.load(save_path + 'AC.pt')\n","agent.network.eval()  # 測試前先將 network 切換為 evaluation 模式\n","# baseAgent.network.eval()\n","NUM_OF_TEST = 5 # Do not revise it !!!!!\n","test_total_reward = []\n","action_list = []\n","for i in range(NUM_OF_TEST):\n","  actions = []\n","  state = env.reset()\n","\n","  img = plt.imshow(env.render(mode='rgb_array'))\n","\n","  total_reward = 0\n","\n","  done = False\n","  while not done:\n","      action, _ = agent.sample(state)\n","      actions.append(action)\n","      state, reward, done, _ = env.step(action)\n","\n","      total_reward += reward\n","\n","      # img.set_data(env.render(mode='rgb_array'))\n","      # display.display(plt.gcf())\n","      # display.clear_output(wait=True)\n","  print(total_reward)\n","  test_total_reward.append(total_reward)\n","\n","  action_list.append(actions) #儲存你測試的結果\n","  print(\"length of actions is \", len(actions))"],"execution_count":22,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/__init__.py:422: UserWarning: torch.set_deterministic is deprecated and will be removed in a future release. Please use torch.use_deterministic_algorithms instead\n","  \"torch.set_deterministic is deprecated and will be removed in a future \"\n","/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py:119: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  input = module(input)\n"],"name":"stderr"},{"output_type":"stream","text":["256.5412392820635\n","length of actions is  296\n","272.12515120181126\n","length of actions is  261\n","281.85853912541745\n","length of actions is  334\n","236.97831866015747\n","length of actions is  257\n","280.67343262076724\n","length of actions is  242\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Aex7mcKr0J01","executionInfo":{"status":"ok","timestamp":1624123615368,"user_tz":-480,"elapsed":262,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"}},"outputId":"0b3e82fa-a666-406c-9432-5ea24f6d10ba"},"source":["print(f\"Your final reward is : %.2f\"%np.mean(test_total_reward))"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Your final reward is : 265.64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"leyebGYRpqsF"},"source":["Action list 的長相"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hGAH4YWDpp4u","executionInfo":{"elapsed":261,"status":"ok","timestamp":1624121502487,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"60895fb4-64a3-4714-a1aa-942b07836ee6"},"source":["print(\"Action list looks like \", action_list)\n","print(\"Action list's shape looks like \", np.shape(action_list))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Action list looks like  [[0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 3, 2, 2, 0, 2, 1, 0, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 1, 2, 2, 2, 2, 2, 3, 1, 3, 1, 1, 2, 2, 2, 1, 3, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 3, 2, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 1, 2, 2, 3, 2, 0, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1, 2, 3, 2, 0, 0, 2, 3, 0, 0, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 3, 2, 2, 0, 0, 2, 0, 2, 2, 2, 0, 1, 3, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 3, 3, 0, 0, 0, 1, 2, 1, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 0, 2, 2, 3, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 3, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 3, 2, 2, 1, 1, 2, 2, 2, 2, 2, 0, 1, 0, 3, 2, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 3, 0, 3, 3, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 0, 3, 0, 2, 3, 2, 2, 3, 2, 2, 2, 0, 1, 0, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 1, 2, 2, 3, 3, 0, 1, 2, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 0, 1, 0, 3, 0, 0, 0, 1, 2, 3, 1, 1, 3, 0, 1, 2, 2, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 1, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 3, 3, 1, 2, 1, 2, 2, 2, 0, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 3, 2, 2, 3, 2, 2, 2, 1, 2, 3, 2, 3, 2, 3, 2, 2, 2, 3, 2, 2, 2, 1, 2, 2, 2, 0, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 0, 2, 2, 0, 2, 2, 3, 2, 2, 0, 2, 2, 2, 0, 1, 2, 2, 0, 2, 1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n","Action list's shape looks like  (5,)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  return array(a, dtype, copy=False, order=order)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"l7sokqEUtrFY"},"source":["Action 的分布\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WHdAItjj1nxw","executionInfo":{"elapsed":258,"status":"ok","timestamp":1624121505611,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"f0d52a47-06d4-43b5-fb2f-b0021ec5d013"},"source":["distribution = {}\n","for actions in action_list:\n","  for action in actions:\n","    if action not in distribution.keys():\n","      distribution[action] = 1\n","    else:\n","      distribution[action] += 1\n","print(distribution)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{0: 556, 1: 113, 3: 101, 2: 417}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ricE0schY75M"},"source":["儲存 Model Testing的結果\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GZsMkGmIY42b","executionInfo":{"elapsed":266,"status":"ok","timestamp":1624121507847,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"b38d9b98-7e94-4e9a-8354-adb335bf90f2"},"source":["PATH = \"Action_List_test.npy\" # 可以改成你想取的名字或路徑\n","np.save(save_path + PATH ,np.array(action_list)) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"asK7WfbkaLjt"},"source":["### 你要交到JudgeBoi的檔案94這個\n","儲存結果到本地端 (就是你的電腦裡拉 = = )\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"c-CqyhHzaWAL","executionInfo":{"elapsed":273,"status":"ok","timestamp":1624121524977,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"067891b2-f2e2-492a-e809-da9e7d5848f9"},"source":["from google.colab import files\n","files.download(save_path + PATH)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_32ece476-a45d-4293-b717-7b288783be0a\", \"Action_List_test.npy\", 2681)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"seT4NUmWmAZ1"},"source":["# Server 測試\n","到時候下面會是我們Server上測試的環境，可以給大家看一下自己的表現如何"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":416},"id":"U69c-YTxaw6b","executionInfo":{"elapsed":1382,"status":"ok","timestamp":1624118627090,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"7f95bd1b-25f8-4743-e313-635faa2ab87c"},"source":["action_list = np.load(save_path + PATH,allow_pickle=True) #到時候你上傳的檔案\n","seed = 543 #到時候測試的seed 請不要更改\n","fix(env, seed)\n","\n","agent.network.eval()  # 測試前先將 network 切換為 evaluation 模式\n","\n","test_total_reward = []\n","for actions in action_list:\n","  state = env.reset()\n","  img = plt.imshow(env.render(mode='rgb_array'))\n","\n","  total_reward = 0\n","\n","  done = False\n","  # while not done:\n","  done_count = 0\n","  for action in actions:\n","      # action, _ = agent1.sample(state)\n","      state, reward, done, _ = env.step(action)\n","      done_count += 1\n","      total_reward += reward\n","      if done:\n","        \n","        break\n","    #   img.set_data(env.render(mode='rgb_array'))\n","    #   display.display(plt.gcf())\n","    #   display.clear_output(wait=True)\n","  print(f\"Your reward is : %.2f\"%total_reward)\n","  test_total_reward.append(total_reward)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/__init__.py:422: UserWarning: torch.set_deterministic is deprecated and will be removed in a future release. Please use torch.use_deterministic_algorithms instead\n","  \"torch.set_deterministic is deprecated and will be removed in a future \"\n"],"name":"stderr"},{"output_type":"stream","text":["Your reward is : 262.21\n","Your reward is : 273.28\n","Your reward is : 223.88\n","Your reward is : 223.45\n","Your reward is : 273.97\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"TjFBWwQP1hVe"},"source":["# 你的成績"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GpJpZz3Wbm0X","executionInfo":{"elapsed":267,"status":"ok","timestamp":1624118631130,"user":{"displayName":"張君豪","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giewpu4H1RC4LywWkj1iyfrLc5i6hgwttwazWU6EQ=s64","userId":"03999016312843703738"},"user_tz":-480},"outputId":"671f7c4f-8616-47d6-8d3b-bb2e3331b876"},"source":["print(f\"Your final reward is : %.2f\"%np.mean(test_total_reward))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Your final reward is : 251.36\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wUBtYXG2eaqf"},"source":["## 參考資料\n","\n","以下是一些有用的參考資料。\n","建議同學們實做前，可以先參考第一則連結的上課影片。\n","在影片的最後有提到兩個有用的 Tips，這對於本次作業的實做非常有幫助。\n","\n","- [DRL Lecture 1: Policy Gradient (Review)](https://youtu.be/z95ZYgPgXOY)\n","- [ML Lecture 23-3: Reinforcement Learning (including Q-learning) start at 30:00](https://youtu.be/2-JNBzCq77c?t=1800)\n","- [Lecture 7: Policy Gradient, David Silver](http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching_files/pg.pdf)\n","\n","* Sample code: https://colab.research.google.com/github/ga642381/ML2021-Spring/blob/main/HW12/HW12_ZH.ipynb\n"]}]}